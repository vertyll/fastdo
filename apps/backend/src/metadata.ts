/* eslint-disable */
export default async () => {
    const t = {
        ["./core/language/enums/language-code.enum"]: await import("./core/language/enums/language-code.enum"),
        ["./core/language/entities/language.entity"]: await import("./core/language/entities/language.entity"),
        ["./terms-and-policies/entities/privacy-policy-section.entity"]: await import("./terms-and-policies/entities/privacy-policy-section.entity"),
        ["./terms-and-policies/enums/legal-section-type.enum"]: await import("./terms-and-policies/enums/legal-section-type.enum"),
        ["./terms-and-policies/entities/privacy-policy.entity"]: await import("./terms-and-policies/entities/privacy-policy.entity"),
        ["./terms-and-policies/entities/privacy-policy-section-translation.entity"]: await import("./terms-and-policies/entities/privacy-policy-section-translation.entity"),
        ["./terms-and-policies/entities/terms-section.entity"]: await import("./terms-and-policies/entities/terms-section.entity"),
        ["./terms-and-policies/entities/terms.entity"]: await import("./terms-and-policies/entities/terms.entity"),
        ["./terms-and-policies/entities/terms-section-translation.entity"]: await import("./terms-and-policies/entities/terms-section-translation.entity"),
        ["./projects/entities/project-role.entity"]: await import("./projects/entities/project-role.entity"),
        ["./users/entities/user.entity"]: await import("./users/entities/user.entity"),
        ["./core/config/types/app.config.type"]: await import("./core/config/types/app.config.type"),
        ["./roles/entities/role.entity"]: await import("./roles/entities/role.entity"),
        ["./common/enums/role.enum"]: await import("./common/enums/role.enum"),
        ["./users/entities/user-role.entity"]: await import("./users/entities/user-role.entity"),
        ["./roles/entities/role-translation.entity"]: await import("./roles/entities/role-translation.entity"),
        ["./auth/entities/refresh-token.entity"]: await import("./auth/entities/refresh-token.entity"),
        ["./core/file/entities/file.entity"]: await import("./core/file/entities/file.entity"),
        ["./projects/entities/project-user-role.entity"]: await import("./projects/entities/project-user-role.entity"),
        ["./users/entities/user-email-history.entity"]: await import("./users/entities/user-email-history.entity"),
        ["./projects/entities/project-category.entity"]: await import("./projects/entities/project-category.entity"),
        ["./projects/entities/project.entity"]: await import("./projects/entities/project.entity"),
        ["./projects/entities/project-category-translation.entity"]: await import("./projects/entities/project-category-translation.entity"),
        ["./projects/entities/project-status.entity"]: await import("./projects/entities/project-status.entity"),
        ["./projects/entities/project-status-translation.entity"]: await import("./projects/entities/project-status-translation.entity"),
        ["./tasks/entities/task.entity"]: await import("./tasks/entities/task.entity"),
        ["./tasks/entities/task-comment.entity"]: await import("./tasks/entities/task-comment.entity"),
        ["./tasks/entities/task-comment-attachment.entity"]: await import("./tasks/entities/task-comment-attachment.entity"),
        ["./tasks/entities/task-priority.entity"]: await import("./tasks/entities/task-priority.entity"),
        ["./tasks/enums/task-priority.enum"]: await import("./tasks/enums/task-priority.enum"),
        ["./tasks/entities/task-priority-translation.entity"]: await import("./tasks/entities/task-priority-translation.entity"),
        ["./tasks/entities/task-attachment.entity"]: await import("./tasks/entities/task-attachment.entity"),
        ["./projects/entities/project-type.entity"]: await import("./projects/entities/project-type.entity"),
        ["./projects/enums/project-type.enum"]: await import("./projects/enums/project-type.enum"),
        ["./projects/entities/project-type-translation.entity"]: await import("./projects/entities/project-type-translation.entity"),
        ["./projects/enums/project-role.enum"]: await import("./projects/enums/project-role.enum"),
        ["./projects/entities/project-role-translation.entity"]: await import("./projects/entities/project-role-translation.entity"),
        ["./projects/entities/project-role-permission.entity"]: await import("./projects/entities/project-role-permission.entity"),
        ["./projects/enums/project-role-permission.enum"]: await import("./projects/enums/project-role-permission.enum"),
        ["./projects/entities/project-role-permission-translation.entity"]: await import("./projects/entities/project-role-permission-translation.entity"),
        ["./notifications/enums/notification-type.enum"]: await import("./notifications/enums/notification-type.enum"),
        ["./notifications/entities/notification.entity"]: await import("./notifications/entities/notification.entity"),
        ["./notifications/enums/notification-status.enum"]: await import("./notifications/enums/notification-status.enum"),
        ["./notifications/entities/notification-translation.entity"]: await import("./notifications/entities/notification-translation.entity"),
        ["./common/dtos/translation.dto"]: await import("./common/dtos/translation.dto"),
        ["./tasks/enums/task-sort-by.enum"]: await import("./tasks/enums/task-sort-by.enum"),
        ["./common/enums/order-by.enum"]: await import("./common/enums/order-by.enum"),
        ["./projects/dtos/user-with-role.dto"]: await import("./projects/dtos/user-with-role.dto"),
        ["./projects/enums/project-invitation-status.enum"]: await import("./projects/enums/project-invitation-status.enum"),
        ["./terms-and-policies/dtos/privacy-policy.dto"]: await import("./terms-and-policies/dtos/privacy-policy.dto"),
        ["./terms-and-policies/dtos/terms.dto"]: await import("./terms-and-policies/dtos/terms.dto"),
        ["./tasks/entities/task-category-translation.entity"]: await import("./tasks/entities/task-category-translation.entity"),
        ["./tasks/entities/task-category.entity"]: await import("./tasks/entities/task-category.entity"),
        ["./tasks/entities/task-status-translation.entity"]: await import("./tasks/entities/task-status-translation.entity"),
        ["./tasks/entities/task-status.entity"]: await import("./tasks/entities/task-status.entity"),
        ["./roles/dtos/role.dto"]: await import("./roles/dtos/role.dto"),
        ["./auth/dtos/access-token.dto"]: await import("./auth/dtos/access-token.dto"),
        ["./notifications/entities/notification-settings.entity"]: await import("./notifications/entities/notification-settings.entity"),
        ["./tasks/dtos/task-priority-response.dto"]: await import("./tasks/dtos/task-priority-response.dto"),
        ["./tasks/dtos/task-response.dto"]: await import("./tasks/dtos/task-response.dto"),
        ["./projects/dtos/project-category-response.dto"]: await import("./projects/dtos/project-category-response.dto"),
        ["./projects/dtos/project-role-response.dto"]: await import("./projects/dtos/project-role-response.dto"),
        ["./projects/dtos/project-status-response.dto"]: await import("./projects/dtos/project-status-response.dto"),
        ["./projects/dtos/project-type-response.dto"]: await import("./projects/dtos/project-type-response.dto"),
        ["./users/dtos/user.dto"]: await import("./users/dtos/user.dto"),
        ["./projects/dtos/project-details-response.dto"]: await import("./projects/dtos/project-details-response.dto")
    };
    return { "@nestjs/swagger": { "models": [[import("./core/language/entities/language.entity"), { "Language": { id: { required: true, type: () => Number }, code: { required: true, enum: t["./core/language/enums/language-code.enum"].LanguageCodeEnum }, name: { required: true, type: () => String }, isActive: { required: true, type: () => Boolean }, isDefault: { required: true, type: () => Boolean } } }], [import("./terms-and-policies/entities/privacy-policy-section-translation.entity"), { "PrivacyPolicySectionTranslation": { id: { required: true, type: () => Number }, title: { required: true, type: () => String }, content: { required: true, type: () => String }, items: { required: true, type: () => [String] }, language: { required: true, type: () => t["./core/language/entities/language.entity"].Language }, section: { required: true, type: () => t["./terms-and-policies/entities/privacy-policy-section.entity"].PrivacyPolicySection } } }], [import("./terms-and-policies/entities/privacy-policy-section.entity"), { "PrivacyPolicySection": { id: { required: true, type: () => Number }, order: { required: true, type: () => Number }, type: { required: true, enum: t["./terms-and-policies/enums/legal-section-type.enum"].LegalSectionTypeEnum }, privacyPolicy: { required: true, type: () => t["./terms-and-policies/entities/privacy-policy.entity"].PrivacyPolicy }, translations: { required: true, type: () => [t["./terms-and-policies/entities/privacy-policy-section-translation.entity"].PrivacyPolicySectionTranslation] } } }], [import("./terms-and-policies/entities/privacy-policy.entity"), { "PrivacyPolicy": { id: { required: true, type: () => Number }, version: { required: true, type: () => String }, dateEffective: { required: true, type: () => Date }, dateCreation: { required: true, type: () => Date }, dateModification: { required: true, type: () => Date, nullable: true }, sections: { required: true, type: () => [t["./terms-and-policies/entities/privacy-policy-section.entity"].PrivacyPolicySection] } } }], [import("./terms-and-policies/entities/terms-section-translation.entity"), { "TermsSectionTranslation": { id: { required: true, type: () => Number }, title: { required: true, type: () => String }, content: { required: true, type: () => String }, items: { required: true, type: () => [String] }, language: { required: true, type: () => t["./core/language/entities/language.entity"].Language }, section: { required: true, type: () => t["./terms-and-policies/entities/terms-section.entity"].TermsSection } } }], [import("./terms-and-policies/entities/terms-section.entity"), { "TermsSection": { id: { required: true, type: () => Number }, order: { required: true, type: () => Number }, type: { required: true, enum: t["./terms-and-policies/enums/legal-section-type.enum"].LegalSectionTypeEnum }, terms: { required: true, type: () => t["./terms-and-policies/entities/terms.entity"].Terms }, translations: { required: true, type: () => [t["./terms-and-policies/entities/terms-section-translation.entity"].TermsSectionTranslation] } } }], [import("./terms-and-policies/entities/terms.entity"), { "Terms": { id: { required: true, type: () => Number }, version: { required: true, type: () => String }, dateEffective: { required: true, type: () => Date }, dateCreation: { required: true, type: () => Date }, dateModification: { required: true, type: () => Date, nullable: true }, sections: { required: true, type: () => [t["./terms-and-policies/entities/terms-section.entity"].TermsSection] } } }], [import("./projects/entities/project-role-translation.entity"), { "ProjectRoleTranslation": { id: { required: true, type: () => Number }, name: { required: true, type: () => String }, description: { required: false, type: () => String }, dateCreation: { required: true, type: () => Date }, dateModification: { required: true, type: () => Date }, projectRole: { required: true, type: () => t["./projects/entities/project-role.entity"].ProjectRole }, language: { required: true, type: () => t["./core/language/entities/language.entity"].Language } } }], [import("./auth/entities/refresh-token.entity"), { "RefreshToken": { id: { required: true, type: () => Number }, token: { required: true, type: () => String }, dateExpiration: { required: true, type: () => Date }, user: { required: true, type: () => t["./users/entities/user.entity"].User } } }], [import("./core/file/entities/file.entity"), { "File": { id: { required: true, type: () => String }, filename: { required: true, type: () => String }, originalName: { required: true, type: () => String }, path: { required: true, type: () => String }, mimetype: { required: true, type: () => String }, encoding: { required: true, type: () => String }, size: { required: true, type: () => Number }, storageType: { required: true, type: () => String, enum: t["./core/config/types/app.config.type"].StorageType }, url: { required: true, type: () => String, nullable: true }, metadata: { required: true, type: () => Object, nullable: true }, dateCreation: { required: true, type: () => Date }, dateModification: { required: true, type: () => Date }, dateDeletion: { required: true, type: () => Date, nullable: true } } }], [import("./users/entities/user-email-history.entity"), { "UserEmailHistory": { id: { required: true, type: () => Number }, oldEmail: { required: true, type: () => String }, newEmail: { required: true, type: () => String }, dateChange: { required: true, type: () => Date }, user: { required: true, type: () => t["./users/entities/user.entity"].User } } }], [import("./roles/entities/role-translation.entity"), { "RoleTranslation": { id: { required: true, type: () => Number }, name: { required: true, type: () => String }, description: { required: true, type: () => String }, dateCreation: { required: true, type: () => Date }, dateModification: { required: true, type: () => Date }, language: { required: true, type: () => t["./core/language/entities/language.entity"].Language }, role: { required: true, type: () => t["./roles/entities/role.entity"].Role } } }], [import("./roles/entities/role.entity"), { "Role": { id: { required: true, type: () => Number }, code: { required: true, enum: t["./common/enums/role.enum"].RoleEnum }, isActive: { required: true, type: () => Boolean }, dateCreation: { required: true, type: () => Date }, dateModification: { required: true, type: () => Date }, userRoles: { required: true, type: () => [t["./users/entities/user-role.entity"].UserRole] }, translations: { required: true, type: () => [t["./roles/entities/role-translation.entity"].RoleTranslation] } } }], [import("./users/entities/user-role.entity"), { "UserRole": { id: { required: true, type: () => Number }, user: { required: true, type: () => t["./users/entities/user.entity"].User }, role: { required: true, type: () => t["./roles/entities/role.entity"].Role } } }], [import("./users/entities/user.entity"), { "User": { id: { required: true, type: () => Number }, email: { required: true, type: () => String }, password: { required: true, type: () => String }, refreshTokens: { required: true, type: () => [t["./auth/entities/refresh-token.entity"].RefreshToken] }, isActive: { required: true, type: () => Boolean }, dateCreation: { required: true, type: () => Date }, dateModification: { required: true, type: () => Date, nullable: true }, userRoles: { required: true, type: () => [t["./users/entities/user-role.entity"].UserRole] }, isEmailConfirmed: { required: true, type: () => Boolean }, confirmationToken: { required: true, type: () => String, nullable: true }, confirmationTokenExpiry: { required: true, type: () => Date, nullable: true }, termsAccepted: { required: true, type: () => Boolean }, privacyPolicyAccepted: { required: true, type: () => Boolean }, dateTermsAcceptance: { required: true, type: () => Date, nullable: true }, datePrivacyPolicyAcceptance: { required: true, type: () => Date, nullable: true }, avatar: { required: true, type: () => t["./core/file/entities/file.entity"].File, nullable: true }, emailChangeToken: { required: true, type: () => String, nullable: true }, pendingEmail: { required: true, type: () => String, nullable: true }, emailChangeTokenExpiry: { required: true, type: () => Date, nullable: true }, projectUserRoles: { required: true, type: () => [t["./projects/entities/project-user-role.entity"].ProjectUserRole] }, emailHistories: { required: true, type: () => [t["./users/entities/user-email-history.entity"].UserEmailHistory] } } }], [import("./projects/entities/project-category-translation.entity"), { "ProjectCategoryTranslation": { id: { required: true, type: () => Number }, name: { required: true, type: () => String }, description: { required: true, type: () => String, nullable: true }, language: { required: true, type: () => t["./core/language/entities/language.entity"].Language }, projectCategory: { required: true, type: () => t["./projects/entities/project-category.entity"].ProjectCategory } } }], [import("./projects/entities/project-category.entity"), { "ProjectCategory": { id: { required: true, type: () => Number }, color: { required: true, type: () => String }, isActive: { required: true, type: () => Boolean }, project: { required: true, type: () => t["./projects/entities/project.entity"].Project }, translations: { required: true, type: () => [t["./projects/entities/project-category-translation.entity"].ProjectCategoryTranslation] } } }], [import("./projects/entities/project-status-translation.entity"), { "ProjectStatusTranslation": { id: { required: true, type: () => Number }, name: { required: true, type: () => String }, description: { required: true, type: () => String, nullable: true }, language: { required: true, type: () => t["./core/language/entities/language.entity"].Language }, projectStatus: { required: true, type: () => t["./projects/entities/project-status.entity"].ProjectStatus } } }], [import("./projects/entities/project-status.entity"), { "ProjectStatus": { id: { required: true, type: () => Number }, color: { required: true, type: () => String }, isActive: { required: true, type: () => Boolean }, project: { required: true, type: () => t["./projects/entities/project.entity"].Project }, translations: { required: true, type: () => [t["./projects/entities/project-status-translation.entity"].ProjectStatusTranslation] } } }], [import("./tasks/entities/task-attachment.entity"), { "TaskAttachment": { id: { required: true, type: () => Number }, dateCreation: { required: true, type: () => Date }, dateModification: { required: true, type: () => Date }, task: { required: true, type: () => t["./tasks/entities/task.entity"].Task }, file: { required: true, type: () => t["./core/file/entities/file.entity"].File } } }], [import("./tasks/entities/task-comment-attachment.entity"), { "TaskCommentAttachment": { id: { required: true, type: () => Number }, dateCreation: { required: true, type: () => Date }, dateModification: { required: true, type: () => Date }, comment: { required: true, type: () => t["./tasks/entities/task-comment.entity"].TaskComment }, file: { required: true, type: () => t["./core/file/entities/file.entity"].File } } }], [import("./tasks/entities/task-comment.entity"), { "TaskComment": { id: { required: true, type: () => Number }, content: { required: true, type: () => String }, dateCreation: { required: true, type: () => Date }, dateModification: { required: true, type: () => Date }, task: { required: true, type: () => t["./tasks/entities/task.entity"].Task }, author: { required: true, type: () => t["./users/entities/user.entity"].User }, commentAttachments: { required: true, type: () => [t["./tasks/entities/task-comment-attachment.entity"].TaskCommentAttachment] } } }], [import("./tasks/entities/task-priority-translation.entity"), { "TaskPriorityTranslation": { id: { required: true, type: () => Number }, name: { required: true, type: () => String }, description: { required: false, type: () => String }, dateCreation: { required: true, type: () => Date }, dateModification: { required: true, type: () => Date }, language: { required: true, type: () => t["./core/language/entities/language.entity"].Language }, priority: { required: true, type: () => t["./tasks/entities/task-priority.entity"].TaskPriority } } }], [import("./tasks/entities/task-priority.entity"), { "TaskPriority": { id: { required: true, type: () => Number }, code: { required: true, enum: t["./tasks/enums/task-priority.enum"].TaskPriorityEnum }, color: { required: true, type: () => String }, isActive: { required: true, type: () => Boolean }, dateCreation: { required: true, type: () => Date }, dateModification: { required: true, type: () => Date }, translations: { required: true, type: () => [t["./tasks/entities/task-priority-translation.entity"].TaskPriorityTranslation] } } }], [import("./tasks/entities/task.entity"), { "Task": { id: { required: true, type: () => Number }, description: { required: true, type: () => String }, additionalDescription: { required: false, type: () => String }, priceEstimation: { required: true, type: () => Number }, workedTime: { required: true, type: () => Number }, accessRole: { required: false, type: () => t["./projects/entities/project-role.entity"].ProjectRole }, dateCreation: { required: true, type: () => Date }, dateModification: { required: true, type: () => Date }, project: { required: true, type: () => t["./projects/entities/project.entity"].Project }, assignedUsers: { required: true, type: () => [t["./users/entities/user.entity"].User] }, createdBy: { required: true, type: () => t["./users/entities/user.entity"].User }, priority: { required: true, type: () => t["./tasks/entities/task-priority.entity"].TaskPriority }, categories: { required: true, type: () => [t["./projects/entities/project-category.entity"].ProjectCategory] }, status: { required: true, type: () => t["./projects/entities/project-status.entity"].ProjectStatus, nullable: true }, taskAttachments: { required: true, type: () => [t["./tasks/entities/task-attachment.entity"].TaskAttachment] }, comments: { required: true, type: () => [t["./tasks/entities/task-comment.entity"].TaskComment] } } }], [import("./projects/entities/project-type-translation.entity"), { "ProjectTypeTranslation": { id: { required: true, type: () => Number }, name: { required: true, type: () => String }, description: { required: true, type: () => String, nullable: true }, language: { required: true, type: () => t["./core/language/entities/language.entity"].Language }, projectType: { required: true, type: () => t["./projects/entities/project-type.entity"].ProjectType } } }], [import("./projects/entities/project-type.entity"), { "ProjectType": { id: { required: true, type: () => Number }, code: { required: true, enum: t["./projects/enums/project-type.enum"].ProjectTypeEnum }, isActive: { required: true, type: () => Boolean }, projects: { required: true, type: () => [t["./projects/entities/project.entity"].Project] }, translations: { required: true, type: () => [t["./projects/entities/project-type-translation.entity"].ProjectTypeTranslation] } } }], [import("./projects/entities/project.entity"), { "Project": { id: { required: true, type: () => Number }, name: { required: true, type: () => String }, description: { required: true, type: () => String, nullable: true }, isPublic: { required: true, type: () => Boolean }, icon: { required: true, type: () => t["./core/file/entities/file.entity"].File, nullable: true }, isActive: { required: true, type: () => Boolean }, dateCreation: { required: true, type: () => Date }, dateModification: { required: true, type: () => Date, nullable: true }, type: { required: true, type: () => t["./projects/entities/project-type.entity"].ProjectType, nullable: true }, tasks: { required: true, type: () => [t["./tasks/entities/task.entity"].Task] }, projectUserRoles: { required: true, type: () => [t["./projects/entities/project-user-role.entity"].ProjectUserRole] }, categories: { required: true, type: () => [t["./projects/entities/project-category.entity"].ProjectCategory] }, statuses: { required: true, type: () => [t["./projects/entities/project-status.entity"].ProjectStatus] } } }], [import("./projects/entities/project-user-role.entity"), { "ProjectUserRole": { id: { required: true, type: () => Number }, project: { required: true, type: () => t["./projects/entities/project.entity"].Project }, user: { required: true, type: () => t["./users/entities/user.entity"].User }, projectRole: { required: true, type: () => t["./projects/entities/project-role.entity"].ProjectRole }, dateAssigned: { required: true, type: () => Date } } }], [import("./projects/entities/project-role.entity"), { "ProjectRole": { id: { required: true, type: () => Number }, code: { required: true, enum: t["./projects/enums/project-role.enum"].ProjectRoleEnum }, isActive: { required: true, type: () => Boolean }, dateCreation: { required: true, type: () => Date }, dateModification: { required: true, type: () => Date }, translations: { required: true, type: () => [t["./projects/entities/project-role-translation.entity"].ProjectRoleTranslation] }, userRoles: { required: true, type: () => [t["./projects/entities/project-user-role.entity"].ProjectUserRole] }, permissions: { required: true, type: () => [t["./projects/entities/project-role-permission.entity"].ProjectRolePermission] } } }], [import("./projects/entities/project-role-permission.entity"), { "ProjectRolePermission": { id: { required: true, type: () => Number }, code: { required: true, enum: t["./projects/enums/project-role-permission.enum"].ProjectRolePermissionEnum }, isActive: { required: true, type: () => Boolean }, dateCreation: { required: true, type: () => Date }, dateModification: { required: true, type: () => Date }, translations: { required: true, type: () => [t["./projects/entities/project-role-permission-translation.entity"].ProjectRolePermissionTranslation] }, roles: { required: true, type: () => [t["./projects/entities/project-role.entity"].ProjectRole] } } }], [import("./projects/entities/project-role-permission-translation.entity"), { "ProjectRolePermissionTranslation": { id: { required: true, type: () => Number }, name: { required: true, type: () => String }, description: { required: false, type: () => String }, dateCreation: { required: true, type: () => Date }, dateModification: { required: true, type: () => Date }, permission: { required: true, type: () => t["./projects/entities/project-role-permission.entity"].ProjectRolePermission }, language: { required: true, type: () => t["./core/language/entities/language.entity"].Language } } }], [import("./roles/dtos/role.dto"), { "RoleDto": { id: { required: true, type: () => Number }, code: { required: true, type: () => String }, name: { required: true, type: () => String }, description: { required: false, type: () => String } } }], [import("./core/file/dtos/file-metadata.dto"), { "FileMetadataDto": { id: { required: false, type: () => String }, filename: { required: true, type: () => String }, originalName: { required: true, type: () => String }, path: { required: true, type: () => String }, mimetype: { required: true, type: () => String }, size: { required: true, type: () => Number }, encoding: { required: true, type: () => String }, url: { required: false, type: () => String }, storageType: { required: true, type: () => String, enum: t["./core/config/types/app.config.type"].StorageType }, metadata: { required: false, type: () => Object } } }], [import("./auth/dtos/register.dto"), { "RegisterDto": { email: { required: true, type: () => String, format: "email" }, password: { required: true, type: () => String, minLength: 8, pattern: "/[A-Z]/" }, termsAccepted: { required: true, type: () => Boolean }, privacyPolicyAccepted: { required: true, type: () => Boolean } } }], [import("./users/dtos/update-profile.dto"), { "UpdateProfileDto": { password: { required: false, type: () => String, minLength: 8, pattern: "/[A-Z]/" }, newPassword: { required: false, type: () => String, minLength: 8, pattern: "/[A-Z]/" } } }], [import("./auth/dtos/access-token.dto"), { "AccessTokenDto": { accessToken: { required: true, type: () => String } } }], [import("./auth/dtos/forgot-password.dto"), { "ForgotPasswordDto": { email: { required: true, type: () => String, format: "email" } } }], [import("./auth/dtos/login.dto"), { "LoginDto": { email: { required: true, type: () => String, format: "email" }, password: { required: true, type: () => String } } }], [import("./auth/dtos/reset-password.dto"), { "ResetPasswordDto": { token: { required: true, type: () => String }, password: { required: true, type: () => String, minLength: 8, pattern: "/[A-Z]/" } } }], [import("./auth/dtos/confirm-email-change-response.dto"), { "ConfirmEmailChangeResponseDto": { success: { required: true, type: () => Boolean }, email: { required: true, type: () => String } } }], [import("./auth/dtos/confirm-email-response.dto"), { "ConfirmEmailResponseDto": { success: { required: true, type: () => Boolean }, email: { required: true, type: () => String } } }], [import("./auth/dtos/login-response.dto"), { "LoginResponseDto": { accessToken: { required: true, type: () => String }, refreshToken: { required: true, type: () => String } } }], [import("./notifications/dtos/create-notification.dto"), { "CreateNotificationDto": { type: { required: true, enum: t["./notifications/enums/notification-type.enum"].NotificationTypeEnum }, title: { required: true, type: () => String }, message: { required: true, type: () => String }, data: { required: false, type: () => Object }, recipientId: { required: true, type: () => Number }, sendEmail: { required: false, type: () => Boolean, default: true } } }], [import("./notifications/dtos/update-notification-settings.dto"), { "UpdateNotificationSettingsDto": { emailNotifications: { required: false, type: () => Boolean }, appNotifications: { required: false, type: () => Boolean }, projectInvitations: { required: false, type: () => Boolean }, taskAssignments: { required: false, type: () => Boolean }, taskComments: { required: false, type: () => Boolean }, taskStatusChanges: { required: false, type: () => Boolean }, projectUpdates: { required: false, type: () => Boolean }, systemNotifications: { required: false, type: () => Boolean } } }], [import("./notifications/entities/notification-settings.entity"), { "NotificationSettings": { id: { required: true, type: () => Number }, emailNotifications: { required: true, type: () => Boolean }, appNotifications: { required: true, type: () => Boolean }, projectInvitations: { required: true, type: () => Boolean }, taskAssignments: { required: true, type: () => Boolean }, taskComments: { required: true, type: () => Boolean }, taskStatusChanges: { required: true, type: () => Boolean }, projectUpdates: { required: true, type: () => Boolean }, systemNotifications: { required: true, type: () => Boolean }, dateCreation: { required: true, type: () => Date }, dateModification: { required: true, type: () => Date }, user: { required: true, type: () => t["./users/entities/user.entity"].User } } }], [import("./notifications/entities/notification-translation.entity"), { "NotificationTranslation": { id: { required: true, type: () => Number }, title: { required: true, type: () => String }, message: { required: true, type: () => String }, language: { required: true, type: () => t["./core/language/entities/language.entity"].Language }, notification: { required: true, type: () => t["./notifications/entities/notification.entity"].Notification } } }], [import("./notifications/entities/notification.entity"), { "Notification": { id: { required: true, type: () => Number }, type: { required: true, enum: t["./notifications/enums/notification-type.enum"].NotificationTypeEnum }, status: { required: true, enum: t["./notifications/enums/notification-status.enum"].NotificationStatusEnum }, data: { required: false, type: () => Object }, dateCreation: { required: true, type: () => Date }, dateModification: { required: true, type: () => Date }, recipient: { required: true, type: () => t["./users/entities/user.entity"].User }, translations: { required: true, type: () => [t["./notifications/entities/notification-translation.entity"].NotificationTranslation] } } }], [import("./common/dtos/translation.dto"), { "TranslationDto": { lang: { required: true, type: () => String }, name: { required: true, type: () => String }, description: { required: false, type: () => String } } }], [import("./tasks/dtos/task-priority-response.dto"), { "TaskPriorityResponseDto": { id: { required: true, type: () => Number }, translations: { required: true, type: () => [t["./common/dtos/translation.dto"].TranslationDto] } } }], [import("./tasks/dtos/create-task-comment.dto"), { "CreateTaskCommentDto": { content: { required: true, type: () => String, minLength: 1 }, attachmentIds: { required: false, type: () => [String] } } }], [import("./tasks/dtos/create-task.dto"), { "CreateTaskDto": { description: { required: true, type: () => String, minLength: 3 }, additionalDescription: { required: false, type: () => String }, projectId: { required: true, type: () => Number }, priorityId: { required: false, type: () => Number }, categoryIds: { required: false, type: () => [Number] }, statusId: { required: false, type: () => Number }, priceEstimation: { required: false, type: () => Number, minimum: 0, maximum: 10000 }, workedTime: { required: false, type: () => Number, minimum: 0, maximum: 10000 }, accessRoleId: { required: false, type: () => Number }, assignedUserIds: { required: false, type: () => [Number] }, attachmentIds: { required: false, type: () => [String] } } }], [import("./tasks/dtos/get-all-tasks-search-params.dto"), { "GetAllTasksSearchParamsDto": { q: { required: false, type: () => String }, priorityIds: { required: true, type: () => [Number] }, categoryIds: { required: true, type: () => [Number] }, statusIds: { required: true, type: () => [Number] }, assignedUserIds: { required: true, type: () => [Number] }, sortBy: { required: false, enum: t["./tasks/enums/task-sort-by.enum"].TaskSortByEnum }, orderBy: { required: false, enum: t["./common/enums/order-by.enum"].OrderByEnum }, createdFrom: { required: false, type: () => String }, createdTo: { required: false, type: () => String }, updatedFrom: { required: false, type: () => String }, updatedTo: { required: false, type: () => String }, page: { required: false, type: () => Number }, pageSize: { required: false, type: () => Number } } }], [import("./tasks/dtos/task-response.dto"), { "TaskResponseDto": { id: { required: true, type: () => Number }, description: { required: true, type: () => String }, additionalDescription: { required: false, type: () => String }, priceEstimation: { required: true, type: () => Number }, workedTime: { required: true, type: () => Number }, accessRole: { required: false, type: () => ({ id: { required: true, type: () => Number }, code: { required: true, type: () => String }, isActive: { required: true, type: () => Boolean }, dateCreation: { required: true, type: () => Date }, dateModification: { required: true, type: () => Date, nullable: true }, translations: { required: true, type: () => [t["./common/dtos/translation.dto"].TranslationDto] } }) }, dateCreation: { required: true, type: () => Date }, dateModification: { required: true, type: () => Date }, project: { required: true, type: () => t["./projects/entities/project.entity"].Project }, assignedUsers: { required: true, type: () => [t["./users/entities/user.entity"].User] }, createdBy: { required: true, type: () => t["./users/entities/user.entity"].User }, priority: { required: false, type: () => ({ id: { required: true, type: () => Number }, code: { required: true, type: () => String }, color: { required: true, type: () => String }, isActive: { required: true, type: () => Boolean }, dateCreation: { required: true, type: () => Date }, dateModification: { required: true, type: () => Date, nullable: true }, translations: { required: true, type: () => [t["./common/dtos/translation.dto"].TranslationDto] } }) }, categories: { required: true }, status: { required: true, type: () => ({ id: { required: true, type: () => Number }, color: { required: true, type: () => String }, isActive: { required: true, type: () => Boolean }, translations: { required: true, type: () => [t["./common/dtos/translation.dto"].TranslationDto] } }), nullable: true }, taskAttachments: { required: true, type: () => [t["./tasks/entities/task-attachment.entity"].TaskAttachment] }, comments: { required: true, type: () => [t["./tasks/entities/task-comment.entity"].TaskComment] } } }], [import("./tasks/dtos/update-task-comment.dto"), { "UpdateTaskCommentDto": { content: { required: true, type: () => String, minLength: 1 }, attachmentIds: { required: false, type: () => [String] } } }], [import("./tasks/dtos/update-task.dto"), { "UpdateTaskDto": { description: { required: false, type: () => String, minLength: 3 }, additionalDescription: { required: false, type: () => String }, priorityId: { required: false, type: () => Number }, categoryId: { required: false, type: () => Number }, categoryIds: { required: false, type: () => [Number] }, statusId: { required: false, type: () => Number }, priceEstimation: { required: false, type: () => Number, minimum: 0, maximum: 10000 }, workedTime: { required: false, type: () => Number, minimum: 0, maximum: 10000 }, accessRoleId: { required: false, type: () => Number }, assignedUserIds: { required: false, type: () => [Number] } } }], [import("./projects/dtos/create-project-category.dto"), { "CreateProjectCategoryDto": { translations: { required: true, type: () => [t["./common/dtos/translation.dto"].TranslationDto] }, color: { required: true, type: () => String }, projectId: { required: true, type: () => Number } } }], [import("./projects/dtos/project-category-response.dto"), { "ProjectCategoryResponseDto": { id: { required: true, type: () => Number }, color: { required: true, type: () => String }, translations: { required: true, type: () => [t["./common/dtos/translation.dto"].TranslationDto] } } }], [import("./projects/dtos/update-project-category.dto"), { "UpdateProjectCategoryDto": { translations: { required: false, type: () => [t["./common/dtos/translation.dto"].TranslationDto] }, color: { required: false, type: () => String }, isActive: { required: false, type: () => Boolean } } }], [import("./projects/dtos/project-role-response.dto"), { "ProjectRoleResponseDto": { id: { required: true, type: () => Number }, translations: { required: true, type: () => [t["./common/dtos/translation.dto"].TranslationDto] } } }], [import("./projects/dtos/create-project-status.dto"), { "CreateProjectStatusDto": { translations: { required: true, type: () => [t["./common/dtos/translation.dto"].TranslationDto] }, color: { required: true, type: () => String }, projectId: { required: true, type: () => Number } } }], [import("./projects/dtos/project-status-response.dto"), { "ProjectStatusResponseDto": { id: { required: true, type: () => Number }, color: { required: true, type: () => String }, translations: { required: true, type: () => [t["./common/dtos/translation.dto"].TranslationDto] } } }], [import("./projects/dtos/update-project-status.dto"), { "UpdateProjectStatusDto": { translations: { required: false, type: () => [t["./common/dtos/translation.dto"].TranslationDto] }, color: { required: false, type: () => String }, isActive: { required: false, type: () => Boolean } } }], [import("./projects/dtos/project-type-response.dto"), { "ProjectTypeResponseDto": { id: { required: true, type: () => Number }, translations: { required: true, type: () => [t["./common/dtos/translation.dto"].TranslationDto] } } }], [import("./projects/dtos/project-user-role.dto"), { "AssignProjectRoleDto": { projectId: { required: true, type: () => Number }, userId: { required: true, type: () => Number }, role: { required: true, type: () => Number } }, "UpdateProjectRoleDto": { role: { required: true, type: () => Number } } }], [import("./users/dtos/user.dto"), { "UserDto": { id: { required: true, type: () => Number }, name: { required: true, type: () => String } } }], [import("./projects/dtos/accept-invitation.dto"), { "AcceptInvitationDto": { invitationId: { required: true, type: () => Number } } }], [import("./projects/dtos/user-with-role.dto"), { "UserWithRoleDto": { email: { required: true, type: () => String, format: "email" }, role: { required: true, type: () => Number } } }], [import("./projects/dtos/create-project.dto"), { "CreateProjectDto": { name: { required: true, type: () => String, minLength: 3 }, description: { required: false, type: () => String }, isPublic: { required: false, type: () => Boolean }, typeId: { required: false, type: () => Number }, categories: { required: false, type: () => [String] }, statuses: { required: false, type: () => [String] }, usersWithRoles: { required: false, type: () => [t["./projects/dtos/user-with-role.dto"].UserWithRoleDto] }, userEmails: { required: false, type: () => [String] } } }], [import("./projects/dtos/get-all-projects-search-params.dto"), { "GetAllProjectsSearchParamsDto": { q: { required: false, type: () => String }, sortBy: { required: false, type: () => String }, orderBy: { required: false, type: () => Object }, createdFrom: { required: false, type: () => String }, createdTo: { required: false, type: () => String }, updatedFrom: { required: false, type: () => String }, updatedTo: { required: false, type: () => String }, typeIds: { required: false, type: () => [Number] }, page: { required: false, type: () => Number }, pageSize: { required: false, type: () => Number } } }], [import("./projects/dtos/project-details-response.dto"), { "ProjectDetailsResponseDto": { id: { required: true, type: () => Number }, name: { required: true, type: () => String }, description: { required: false, type: () => String, nullable: true }, isPublic: { required: true, type: () => Boolean }, icon: { required: true, type: () => ({ url: { required: true, type: () => String, nullable: true } }), nullable: true }, isActive: { required: true, type: () => Boolean }, dateCreation: { required: true, type: () => Date }, dateModification: { required: false, type: () => Date, nullable: true }, type: { required: false }, categories: { required: false }, statuses: { required: false }, permissions: { required: false, type: () => [String] }, projectUserRoles: { required: false } } }], [import("./projects/dtos/project-list-response.dto"), { "ProjectListResponseDto": { id: { required: true, type: () => Number }, name: { required: true, type: () => String }, description: { required: false, type: () => String, nullable: true }, isPublic: { required: true, type: () => Boolean }, icon: { required: false, type: () => ({ url: { required: true, type: () => String, nullable: true } }), nullable: true }, isActive: { required: true, type: () => Boolean }, dateCreation: { required: true, type: () => Date }, dateModification: { required: false, type: () => Date, nullable: true }, type: { required: false, type: () => ({ id: { required: true, type: () => Number }, code: { required: true, type: () => String }, translations: { required: true, type: () => [t["./common/dtos/translation.dto"].TranslationDto] } }) }, categories: { required: false }, statuses: { required: false }, permissions: { required: false, type: () => [String] } } }], [import("./projects/dtos/reject-invitation.dto"), { "RejectInvitationDto": { invitationId: { required: true, type: () => Number } } }], [import("./projects/dtos/update-project.dto"), { "UpdateProjectDto": { isActive: { required: false, type: () => Boolean }, usersWithRoles: { required: false, type: () => [t["./projects/dtos/user-with-role.dto"].UserWithRoleDto] }, userEmails: { required: false, type: () => [String] } } }], [import("./projects/entities/project-invitation.entity"), { "ProjectInvitation": { id: { required: true, type: () => Number }, project: { required: true, type: () => t["./projects/entities/project.entity"].Project }, user: { required: true, type: () => t["./users/entities/user.entity"].User }, inviter: { required: true, type: () => t["./users/entities/user.entity"].User }, role: { required: true, type: () => t["./projects/entities/project-role.entity"].ProjectRole }, status: { required: true, enum: t["./projects/enums/project-invitation-status.enum"].ProjectInvitationStatusEnum }, dateCreated: { required: true, type: () => Date }, dateUpdated: { required: true, type: () => Date } } }], [import("./terms-and-policies/dtos/privacy-policy.dto"), { "PrivacyPolicySectionTranslationDto": { id: { required: true, type: () => Number }, title: { required: true, type: () => String }, content: { required: true, type: () => String }, items: { required: true, type: () => [String] }, language: { required: true, type: () => ({ id: { required: true, type: () => Number }, code: { required: true, type: () => String }, name: { required: true, type: () => String } }) } }, "PrivacyPolicySectionDto": { id: { required: true, type: () => Number }, order: { required: true, type: () => Number }, type: { required: true, type: () => String }, translations: { required: true, type: () => [t["./terms-and-policies/dtos/privacy-policy.dto"].PrivacyPolicySectionTranslationDto] } }, "PrivacyPolicyDto": { id: { required: true, type: () => Number }, version: { required: true, type: () => String }, dateEffective: { required: true, type: () => Date }, dateCreation: { required: true, type: () => Date }, dateModification: { required: true, type: () => Date, nullable: true }, sections: { required: true, type: () => [t["./terms-and-policies/dtos/privacy-policy.dto"].PrivacyPolicySectionDto] } } }], [import("./terms-and-policies/dtos/terms.dto"), { "TermsSectionTranslationDto": { id: { required: true, type: () => Number }, title: { required: true, type: () => String }, content: { required: true, type: () => String }, items: { required: true, type: () => [String] }, language: { required: true, type: () => ({ id: { required: true, type: () => Number }, code: { required: true, type: () => String }, name: { required: true, type: () => String } }) } }, "TermsSectionDto": { id: { required: true, type: () => Number }, order: { required: true, type: () => Number }, type: { required: true, type: () => String }, translations: { required: true, type: () => [t["./terms-and-policies/dtos/terms.dto"].TermsSectionTranslationDto] } }, "TermsDto": { id: { required: true, type: () => Number }, version: { required: true, type: () => String }, dateEffective: { required: true, type: () => Date }, dateCreation: { required: true, type: () => Date }, dateModification: { required: true, type: () => Date, nullable: true }, sections: { required: true, type: () => [t["./terms-and-policies/dtos/terms.dto"].TermsSectionDto] } } }], [import("./projects/dtos/project-role.dto"), { "ProjectRoleDto": { id: { required: true, type: () => Number }, name: { required: true, type: () => String }, description: { required: false, type: () => String } } }], [import("./projects/dtos/project-type.dto"), { "ProjectTypeDto": { id: { required: true, type: () => Number }, name: { required: true, type: () => String }, description: { required: false, type: () => String } } }], [import("./tasks/entities/task-category.entity"), { "TaskCategory": { id: { required: true, type: () => Number }, color: { required: true, type: () => String }, isActive: { required: true, type: () => Boolean }, translations: { required: true, type: () => [t["./tasks/entities/task-category-translation.entity"].TaskCategoryTranslation] } } }], [import("./tasks/entities/task-category-translation.entity"), { "TaskCategoryTranslation": { id: { required: true, type: () => Number }, name: { required: true, type: () => String }, description: { required: false, type: () => String }, language: { required: true, type: () => t["./core/language/entities/language.entity"].Language }, taskCategory: { required: true, type: () => t["./tasks/entities/task-category.entity"].TaskCategory } } }], [import("./tasks/entities/task-status.entity"), { "TaskStatus": { id: { required: true, type: () => Number }, color: { required: true, type: () => String }, isActive: { required: true, type: () => Boolean }, isDefault: { required: true, type: () => Boolean }, translations: { required: true, type: () => [t["./tasks/entities/task-status-translation.entity"].TaskStatusTranslation] } } }], [import("./tasks/entities/task-status-translation.entity"), { "TaskStatusTranslation": { id: { required: true, type: () => Number }, name: { required: true, type: () => String }, description: { required: false, type: () => String }, language: { required: true, type: () => t["./core/language/entities/language.entity"].Language }, taskStatus: { required: true, type: () => t["./tasks/entities/task-status.entity"].TaskStatus } } }], [import("./projects/dtos/project-category.dto"), { "ProjectCategoryDto": { id: { required: true, type: () => Number }, name: { required: true, type: () => String } } }], [import("./projects/dtos/project-status.dto"), { "ProjectStatusDto": { id: { required: true, type: () => Number }, name: { required: true, type: () => String } } }], [import("./common/dtos/pagination-query.dto"), { "PaginationQueryDto": { limit: { required: true, type: () => Number, minimum: 1 }, offset: { required: true, type: () => Number, minimum: 1 } } }], [import("./projects/dtos/project-invitation.dto"), { "ProjectInvitationDto": { id: { required: true, type: () => Number }, projectId: { required: true, type: () => Number }, userId: { required: true, type: () => Number }, inviterId: { required: true, type: () => Number }, roleId: { required: false, type: () => Number }, status: { required: true, enum: t["./projects/enums/project-invitation-status.enum"].ProjectInvitationStatusEnum }, dateCreated: { required: true, type: () => Date }, dateUpdated: { required: true, type: () => Date } } }]], "controllers": [[import("./app.controller"), { "AppController": { "getHello": { type: String } } }], [import("./roles/controllers/roles.controller"), { "RolesController": { "getAllRoles": { type: [t["./roles/dtos/role.dto"].RoleDto] } } }], [import("./users/controllers/users.controller"), { "UsersController": { "updateProfile": { type: Object }, "getCurrentUser": { type: Object } } }], [import("./auth/controllers/auth.controller"), { "AuthController": { "login": { type: t["./auth/dtos/access-token.dto"].AccessTokenDto }, "register": { type: t["./users/entities/user.entity"].User }, "refreshToken": { type: t["./auth/dtos/access-token.dto"].AccessTokenDto }, "logout": {}, "confirmEmail": {}, "forgotPassword": {}, "resetPassword": {}, "confirmEmailChange": {} } }], [import("./notifications/controllers/notification.controller"), { "NotificationController": { "create": { type: Object }, "findAll": { type: [t["./notifications/entities/notification.entity"].Notification] }, "deleteMyNotification": {}, "getMyNotifications": { type: [t["./notifications/entities/notification.entity"].Notification] }, "getMyUnreadCount": { type: Number }, "markAllMyAsRead": {}, "clearAllMyNotifications": {}, "getMySettings": { type: t["./notifications/entities/notification-settings.entity"].NotificationSettings }, "updateMySettings": { type: t["./notifications/entities/notification-settings.entity"].NotificationSettings }, "markMyAsRead": {}, "getUserNotifications": { type: [t["./notifications/entities/notification.entity"].Notification] }, "getUnreadCount": { type: Number }, "markAsRead": {}, "markAllAsRead": {}, "getUserSettings": { type: t["./notifications/entities/notification-settings.entity"].NotificationSettings }, "updateUserSettings": { type: t["./notifications/entities/notification-settings.entity"].NotificationSettings } } }], [import("./tasks/controllers/task-priority.controller"), { "TaskPriorityController": { "findAll": { type: [t["./tasks/dtos/task-priority-response.dto"].TaskPriorityResponseDto] } } }], [import("./tasks/controllers/tasks.controller"), { "TasksController": { "create": { type: t["./tasks/entities/task.entity"].Task }, "findAll": {}, "findAllByProjectId": {}, "findOne": { type: t["./tasks/dtos/task-response.dto"].TaskResponseDto }, "update": { type: t["./tasks/dtos/task-response.dto"].TaskResponseDto }, "remove": {}, "createComment": { type: t["./tasks/entities/task-comment.entity"].TaskComment }, "removeComment": {}, "updateComment": { type: t["./tasks/entities/task-comment.entity"].TaskComment } } }], [import("./projects/controllers/project-category.controller"), { "ProjectCategoryController": { "getProjectCategories": { type: [t["./projects/dtos/project-category-response.dto"].ProjectCategoryResponseDto] }, "createCategory": { type: t["./projects/entities/project-category.entity"].ProjectCategory }, "updateCategory": { type: t["./projects/entities/project-category.entity"].ProjectCategory }, "deleteCategory": {} } }], [import("./projects/controllers/project-role.controller"), { "ProjectRoleController": { "findAll": { type: [t["./projects/dtos/project-role-response.dto"].ProjectRoleResponseDto] } } }], [import("./projects/controllers/project-status.controller"), { "ProjectStatusController": { "getProjectStatuses": { type: [t["./projects/dtos/project-status-response.dto"].ProjectStatusResponseDto] }, "createStatus": { type: t["./projects/entities/project-status.entity"].ProjectStatus }, "updateStatus": { type: t["./projects/entities/project-status.entity"].ProjectStatus }, "deleteStatus": {} } }], [import("./projects/controllers/project-type.controller"), { "ProjectTypeController": { "getAll": { type: [t["./projects/dtos/project-type-response.dto"].ProjectTypeResponseDto] } } }], [import("./projects/controllers/project-user-role.controller"), { "ProjectUserRoleController": { "assignRole": { type: t["./projects/entities/project-user-role.entity"].ProjectUserRole }, "getProjectRoles": { type: [t["./projects/entities/project-user-role.entity"].ProjectUserRole] }, "getUserRoles": { type: [t["./projects/entities/project-user-role.entity"].ProjectUserRole] }, "getUserRoleInProject": { type: Object }, "updateRole": { type: t["./projects/entities/project-user-role.entity"].ProjectUserRole }, "removeRole": {}, "getUsersInProject": { type: [t["./projects/entities/project-user-role.entity"].ProjectUserRole] } } }], [import("./projects/controllers/projects.controller"), { "ProjectsController": { "getAll": {}, "create": { type: t["./projects/entities/project.entity"].Project }, "findOne": { type: t["./projects/entities/project.entity"].Project }, "getProjectUsers": { type: [t["./users/dtos/user.dto"].UserDto] }, "findOneWithDetails": { type: t["./projects/dtos/project-details-response.dto"].ProjectDetailsResponseDto }, "update": { type: t["./projects/entities/project.entity"].Project }, "remove": {}, "acceptInvitation": {}, "rejectInvitation": {} } }], [import("./terms-and-policies/controllers/terms-and-policies.controller"), { "TermsAndPoliciesController": { "getTerms": { type: t["./terms-and-policies/dtos/terms.dto"].TermsDto }, "getPrivacyPolicy": { type: t["./terms-and-policies/dtos/privacy-policy.dto"].PrivacyPolicyDto } } }]] } };
};